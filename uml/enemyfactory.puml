@startuml

BaseGame ..> EnemyCreator
BaseGame ..> AbstractEnemy

MobCreator ..> MobEnemy
EliteCreator ..> EliteEnemy
BossCreator ..> BossEnemy

abstract class BaseGame{

}

interface EnemyCreator{
    + {abstract}createEnemy(int locationX, int locationY, int speedX, int speedY, int hp):AbstractEnemy
}

abstract class AbstractEnemy{
    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + drop_Items():AbstractItems
}

class MobEnemy extends AbstractEnemy{
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
}
class EliteEnemy extends AbstractEnemy{
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
}

class BossEnemy extends AbstractEnemy{
    + {static}exist:Boolean
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
}

class MobCreator implements EnemyCreator{
    + createEnemy(int locationX, int locationY, int speedX, int speedY, int hp):MobEnemy
}

class EliteCreator implements EnemyCreator{
    - {static}direction:int
    + createEnemy(int locationX, int locationY, int speedX, int speedY, int hp):EliteEnemy
}

class BossCreator implements EnemyCreator{
    + createEnemy(int locationX, int locationY, int speedX, int speedY, int hp):BossEnemy
}

@enduml
