@startuml

abstract class AbstractEnemy{}

abstract class AbstractItem{
    + AbstractItem(int locationX, int locationY, int speedX, int speedY)
    + {abstract}ActivateItem(HeroAircraft heroAircraft):void
    + forward():void
}

interface ItemCreator{
    + {abstract}CreateItem(int locationX, int locationY, int speedX, int speedY):AbstractItems
}

AbstractEnemy ..> ItemCreator
AbstractEnemy ..> AbstractItem


ItemBloodCreator ..> ItemBlood
ItemFireCreator ..> ItemFire
ItemBombCreator ..> ItemBomb

class ItemBlood extends AbstractItem{
    - add_Hp:int
    + ItemBlood(int locationX, int locationY, int speedX, int speedY)
    + ActivateItem(HeroAircraft heroAircraft):void
}

class ItemFire extends AbstractItem{
    + ItemFire(int locationX, int locationY, int speedX, int speedY)
    + ActivateItem(HeroAircraft heroAircraft):void
}

class ItemBomb extends AbstractItem{
    - subscriber:ArrayList<AbstractFlyingObject>
    + ItemBomb(int locationX, int locationY, int speedX, int speedY)
    + addSubscriber(AbstractFlyingObject obj):void
    + addAllSubscriber(List<BaseBullet> obj):void
    + deleteSubscriber(AbstractFlyingObject obj):void
    + notifySubscriber():void
    + getSubscriber():ArrayList<AbstractFlyingObject>
    + ActivateItem(HeroAircraft heroAircraft):void
}

class ItemBloodCreator implements ItemCreator{
    + CreateItem(int locationX, int locationY, int speedX, int speedY):ItemBlood
}

class ItemFireCreator implements ItemCreator{
    + CreateItem(int locationX, int locationY, int speedX, int speedY):ItemFire
}

class ItemBombCreator implements ItemCreator{
    + CreateItem(int locationX, int locationY, int speedX, int speedY):ItemBomb
}

@enduml